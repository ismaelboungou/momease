/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ParentingTip } from "./ParentingTip";
import { ParentingTipCountArgs } from "./ParentingTipCountArgs";
import { ParentingTipFindManyArgs } from "./ParentingTipFindManyArgs";
import { ParentingTipFindUniqueArgs } from "./ParentingTipFindUniqueArgs";
import { CreateParentingTipArgs } from "./CreateParentingTipArgs";
import { UpdateParentingTipArgs } from "./UpdateParentingTipArgs";
import { DeleteParentingTipArgs } from "./DeleteParentingTipArgs";
import { User } from "../../user/base/User";
import { ParentingTipService } from "../parentingTip.service";
@graphql.Resolver(() => ParentingTip)
export class ParentingTipResolverBase {
  constructor(protected readonly service: ParentingTipService) {}

  async _parentingTipsMeta(
    @graphql.Args() args: ParentingTipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ParentingTip])
  async parentingTips(
    @graphql.Args() args: ParentingTipFindManyArgs
  ): Promise<ParentingTip[]> {
    return this.service.parentingTips(args);
  }

  @graphql.Query(() => ParentingTip, { nullable: true })
  async parentingTip(
    @graphql.Args() args: ParentingTipFindUniqueArgs
  ): Promise<ParentingTip | null> {
    const result = await this.service.parentingTip(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ParentingTip)
  async createParentingTip(
    @graphql.Args() args: CreateParentingTipArgs
  ): Promise<ParentingTip> {
    return await this.service.createParentingTip({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ParentingTip)
  async updateParentingTip(
    @graphql.Args() args: UpdateParentingTipArgs
  ): Promise<ParentingTip | null> {
    try {
      return await this.service.updateParentingTip({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParentingTip)
  async deleteParentingTip(
    @graphql.Args() args: DeleteParentingTipArgs
  ): Promise<ParentingTip | null> {
    try {
      return await this.service.deleteParentingTip(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: ParentingTip): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
