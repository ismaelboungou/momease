/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommunityForum } from "./CommunityForum";
import { CommunityForumCountArgs } from "./CommunityForumCountArgs";
import { CommunityForumFindManyArgs } from "./CommunityForumFindManyArgs";
import { CommunityForumFindUniqueArgs } from "./CommunityForumFindUniqueArgs";
import { CreateCommunityForumArgs } from "./CreateCommunityForumArgs";
import { UpdateCommunityForumArgs } from "./UpdateCommunityForumArgs";
import { DeleteCommunityForumArgs } from "./DeleteCommunityForumArgs";
import { User } from "../../user/base/User";
import { CommunityForumService } from "../communityForum.service";
@graphql.Resolver(() => CommunityForum)
export class CommunityForumResolverBase {
  constructor(protected readonly service: CommunityForumService) {}

  async _communityForumsMeta(
    @graphql.Args() args: CommunityForumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommunityForum])
  async communityForums(
    @graphql.Args() args: CommunityForumFindManyArgs
  ): Promise<CommunityForum[]> {
    return this.service.communityForums(args);
  }

  @graphql.Query(() => CommunityForum, { nullable: true })
  async communityForum(
    @graphql.Args() args: CommunityForumFindUniqueArgs
  ): Promise<CommunityForum | null> {
    const result = await this.service.communityForum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommunityForum)
  async createCommunityForum(
    @graphql.Args() args: CreateCommunityForumArgs
  ): Promise<CommunityForum> {
    return await this.service.createCommunityForum({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CommunityForum)
  async updateCommunityForum(
    @graphql.Args() args: UpdateCommunityForumArgs
  ): Promise<CommunityForum | null> {
    try {
      return await this.service.updateCommunityForum({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommunityForum)
  async deleteCommunityForum(
    @graphql.Args() args: DeleteCommunityForumArgs
  ): Promise<CommunityForum | null> {
    try {
      return await this.service.deleteCommunityForum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: CommunityForum
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
