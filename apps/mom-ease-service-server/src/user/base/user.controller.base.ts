/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { CommunityForumFindManyArgs } from "../../communityForum/base/CommunityForumFindManyArgs";
import { CommunityForum } from "../../communityForum/base/CommunityForum";
import { CommunityForumWhereUniqueInput } from "../../communityForum/base/CommunityForumWhereUniqueInput";
import { EventFindManyArgs } from "../../event/base/EventFindManyArgs";
import { Event } from "../../event/base/Event";
import { EventWhereUniqueInput } from "../../event/base/EventWhereUniqueInput";
import { LocationFindManyArgs } from "../../location/base/LocationFindManyArgs";
import { Location } from "../../location/base/Location";
import { LocationWhereUniqueInput } from "../../location/base/LocationWhereUniqueInput";
import { MilestoneFindManyArgs } from "../../milestone/base/MilestoneFindManyArgs";
import { Milestone } from "../../milestone/base/Milestone";
import { MilestoneWhereUniqueInput } from "../../milestone/base/MilestoneWhereUniqueInput";
import { ParentingTipFindManyArgs } from "../../parentingTip/base/ParentingTipFindManyArgs";
import { ParentingTip } from "../../parentingTip/base/ParentingTip";
import { ParentingTipWhereUniqueInput } from "../../parentingTip/base/ParentingTipWhereUniqueInput";
import { ProductReviewFindManyArgs } from "../../productReview/base/ProductReviewFindManyArgs";
import { ProductReview } from "../../productReview/base/ProductReview";
import { ProductReviewWhereUniqueInput } from "../../productReview/base/ProductReviewWhereUniqueInput";
import { ResourceFindManyArgs } from "../../resource/base/ResourceFindManyArgs";
import { Resource } from "../../resource/base/Resource";
import { ResourceWhereUniqueInput } from "../../resource/base/ResourceWhereUniqueInput";
import { UserProfileFindManyArgs } from "../../userProfile/base/UserProfileFindManyArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserProfileWhereUniqueInput } from "../../userProfile/base/UserProfileWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        joinedDate: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        joinedDate: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        joinedDate: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          joinedDate: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          joinedDate: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/communityForums")
  @ApiNestedQuery(CommunityForumFindManyArgs)
  async findCommunityForums(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<CommunityForum[]> {
    const query = plainToClass(CommunityForumFindManyArgs, request.query);
    const results = await this.service.findCommunityForums(params.id, {
      ...query,
      select: {
        createdAt: true,
        createdDate: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/communityForums")
  async connectCommunityForums(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CommunityForumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      communityForums: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/communityForums")
  async updateCommunityForums(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CommunityForumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      communityForums: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/communityForums")
  async disconnectCommunityForums(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CommunityForumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      communityForums: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/events")
  @ApiNestedQuery(EventFindManyArgs)
  async findEvents(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Event[]> {
    const query = plainToClass(EventFindManyArgs, request.query);
    const results = await this.service.findEvents(params.id, {
      ...query,
      select: {
        createdAt: true,
        eventDate: true,
        eventName: true,
        id: true,
        location: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/events")
  async connectEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/events")
  async updateEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/events")
  async disconnectEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/locations")
  @ApiNestedQuery(LocationFindManyArgs)
  async findLocations(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Location[]> {
    const query = plainToClass(LocationFindManyArgs, request.query);
    const results = await this.service.findLocations(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        rating: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/locations")
  async connectLocations(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      locations: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/locations")
  async updateLocations(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      locations: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/locations")
  async disconnectLocations(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      locations: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/milestones")
  @ApiNestedQuery(MilestoneFindManyArgs)
  async findMilestones(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Milestone[]> {
    const query = plainToClass(MilestoneFindManyArgs, request.query);
    const results = await this.service.findMilestones(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        milestoneDate: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/milestones")
  async connectMilestones(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MilestoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      milestones: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/milestones")
  async updateMilestones(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MilestoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      milestones: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/milestones")
  async disconnectMilestones(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MilestoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      milestones: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/parentingTips")
  @ApiNestedQuery(ParentingTipFindManyArgs)
  async findParentingTips(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ParentingTip[]> {
    const query = plainToClass(ParentingTipFindManyArgs, request.query);
    const results = await this.service.findParentingTips(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        tipContent: true,
        tipDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/parentingTips")
  async connectParentingTips(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ParentingTipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parentingTips: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/parentingTips")
  async updateParentingTips(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ParentingTipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parentingTips: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/parentingTips")
  async disconnectParentingTips(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ParentingTipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parentingTips: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productReviews")
  @ApiNestedQuery(ProductReviewFindManyArgs)
  async findProductReviews(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ProductReview[]> {
    const query = plainToClass(ProductReviewFindManyArgs, request.query);
    const results = await this.service.findProductReviews(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        photoUrl: true,
        productName: true,
        rating: true,
        reviewContent: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productReviews")
  async connectProductReviews(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProductReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productReviews: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productReviews")
  async updateProductReviews(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProductReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productReviews: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productReviews")
  async disconnectProductReviews(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProductReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productReviews: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/resources")
  @ApiNestedQuery(ResourceFindManyArgs)
  async findResources(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Resource[]> {
    const query = plainToClass(ResourceFindManyArgs, request.query);
    const results = await this.service.findResources(params.id, {
      ...query,
      select: {
        category: true,
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/resources")
  async connectResources(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ResourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      resources: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/resources")
  async updateResources(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ResourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      resources: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/resources")
  async disconnectResources(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ResourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      resources: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userProfiles")
  @ApiNestedQuery(UserProfileFindManyArgs)
  async findUserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserProfile[]> {
    const query = plainToClass(UserProfileFindManyArgs, request.query);
    const results = await this.service.findUserProfiles(params.id, {
      ...query,
      select: {
        createdAt: true,
        familyInfo: true,
        id: true,
        privacySettings: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userProfiles")
  async connectUserProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfiles: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userProfiles")
  async updateUserProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfiles: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userProfiles")
  async disconnectUserProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
