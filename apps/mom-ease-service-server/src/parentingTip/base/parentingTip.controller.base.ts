/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParentingTipService } from "../parentingTip.service";
import { ParentingTipCreateInput } from "./ParentingTipCreateInput";
import { ParentingTip } from "./ParentingTip";
import { ParentingTipFindManyArgs } from "./ParentingTipFindManyArgs";
import { ParentingTipWhereUniqueInput } from "./ParentingTipWhereUniqueInput";
import { ParentingTipUpdateInput } from "./ParentingTipUpdateInput";

export class ParentingTipControllerBase {
  constructor(protected readonly service: ParentingTipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ParentingTip })
  async createParentingTip(
    @common.Body() data: ParentingTipCreateInput
  ): Promise<ParentingTip> {
    return await this.service.createParentingTip({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        tipContent: true,
        tipDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ParentingTip] })
  @ApiNestedQuery(ParentingTipFindManyArgs)
  async parentingTips(@common.Req() request: Request): Promise<ParentingTip[]> {
    const args = plainToClass(ParentingTipFindManyArgs, request.query);
    return this.service.parentingTips({
      ...args,
      select: {
        createdAt: true,
        id: true,
        tipContent: true,
        tipDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ParentingTip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async parentingTip(
    @common.Param() params: ParentingTipWhereUniqueInput
  ): Promise<ParentingTip | null> {
    const result = await this.service.parentingTip({
      where: params,
      select: {
        createdAt: true,
        id: true,
        tipContent: true,
        tipDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ParentingTip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParentingTip(
    @common.Param() params: ParentingTipWhereUniqueInput,
    @common.Body() data: ParentingTipUpdateInput
  ): Promise<ParentingTip | null> {
    try {
      return await this.service.updateParentingTip({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          tipContent: true,
          tipDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ParentingTip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParentingTip(
    @common.Param() params: ParentingTipWhereUniqueInput
  ): Promise<ParentingTip | null> {
    try {
      return await this.service.deleteParentingTip({
        where: params,
        select: {
          createdAt: true,
          id: true,
          tipContent: true,
          tipDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
