/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User as PrismaUser,
  CommunityForum as PrismaCommunityForum,
  Event as PrismaEvent,
  Location as PrismaLocation,
  Milestone as PrismaMilestone,
  ParentingTip as PrismaParentingTip,
  ProductReview as PrismaProductReview,
  Resource as PrismaResource,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class UserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    return this.prisma.user.findMany(args);
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create(args);
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update(args);
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async findCommunityForums(
    parentId: string,
    args: Prisma.CommunityForumFindManyArgs
  ): Promise<PrismaCommunityForum[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .communityForums(args);
  }

  async findEvents(
    parentId: string,
    args: Prisma.EventFindManyArgs
  ): Promise<PrismaEvent[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .events(args);
  }

  async findLocations(
    parentId: string,
    args: Prisma.LocationFindManyArgs
  ): Promise<PrismaLocation[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .locations(args);
  }

  async findMilestones(
    parentId: string,
    args: Prisma.MilestoneFindManyArgs
  ): Promise<PrismaMilestone[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .milestones(args);
  }

  async findParentingTips(
    parentId: string,
    args: Prisma.ParentingTipFindManyArgs
  ): Promise<PrismaParentingTip[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .parentingTips(args);
  }

  async findProductReviews(
    parentId: string,
    args: Prisma.ProductReviewFindManyArgs
  ): Promise<PrismaProductReview[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productReviews(args);
  }

  async findResources(
    parentId: string,
    args: Prisma.ResourceFindManyArgs
  ): Promise<PrismaResource[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .resources(args);
  }

  async findUserProfiles(
    parentId: string,
    args: Prisma.UserProfileFindManyArgs
  ): Promise<PrismaUserProfile[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userProfiles(args);
  }
}
